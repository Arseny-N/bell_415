#include <signal.h>
#include <time.h>
#include "generic.h"

//struct timers *timer_make(char *descr);
//int timer_destroy(struct timers *timer);

//int timer_arm(struct timers *timer, time_t inter, time_t corr);
//int timer_disarm(struct timers *timer);

int rm_timer(char *descr);
int mk_timer(char *descr, time_t inter);
int rm_all_timers(void);

/* Need move it to some sensed place! */
int  mk_timers(	struct timer_set_rq *s_rq ); 

void print_timers(void);
//struct timers *timer_find(char *descr);
#define __tm_zero(t,v) tm->tm_##t = v


static inline void __zero_out_unneed( struct tm *tm )
{
	struct tm saved_tm;
	int m, h;
	m = saved_tm.tm_min = tm->tm_min;
	h = saved_tm.tm_hour = tm->tm_hour;
	
	memset(tm, 0, sizeof(*tm));
	
 	__tm_zero(sec,0);       /* Seconds.	[0-60] (1 leap second) */  
	__tm_zero(min,0);	/* Minutes.	[0-59] */		   
	__tm_zero(hour,0);	/* Hours.	[0-23] */		   
	__tm_zero(mday,1);	/* Day.		[1-31] */	   
	__tm_zero(mon,0);	/* Month.	[0-11] */		   
	__tm_zero(year,70);	/* Year	- 1900.	 */		   
	__tm_zero(wday,0);	/* Day of week.	[0-6] */		 
	__tm_zero(yday,0);	/* Days in year.[0-365]	*/		 
	__tm_zero(isdst,0);	/* DST.		[-1/0/1]*/							    
  
# ifdef	__USE_BSD			
	__tm_zero(gmtoff,0);          /* Seconds east of UTC.  */
# else
	tm->__tm_gmtoff = 0            /* Seconds east of UTC.  */

# endif
	tm->tm_min = m;
	tm->tm_hour = h;


}

static inline void __zero_out_all( struct tm *tm )
{

	memset(tm, 0, sizeof(*tm));
	/*	
	__tm_zero(tm, min );
	__tm_zero(tm, hour);
	__tm_zero(tm, mday);
	__tm_zero(tm, mon );
	__tm_zero(tm, year);
	__tm_zero(tm, wday);
	__tm_zero(tm, yday);
	__tm_zero(tm, isdst);
	

	*/
}
